{"version":3,"sources":["components/Timer/index.js","components/Timer/timer.jsx","components/Countdown/countdown.jsx","components/Countdown/inputTime.jsx","App.jsx","index.jsx"],"names":["Timer","props","startTimer","setState","state","start","myInterval","setInterval","count","clearInterval","resetTimer","this","type","onClick","className","number","minutes","Math","floor","seconds","mili","dividOn","Component","Countdownn","startTime","newCount","timeInSecs","mins","secs","milise","toString","padStart","showTime","progressBar","percent","status","defaultProps","InputTime","sliderChange","value","trunc","sliderValue","minutesChange","secondsChange","startOrPause","disabled","step","min","max","onChange","placeholder","rype","TabPane","Tabs","callback","key","console","log","App","defaultActiveKey","tab","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b5eb5f4.chunk.js","sourcesContent":["import Timer from './timer';\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport { Button } from 'antd';\nimport './timer.css';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      start: false,\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n  }\n\n  startTimer = () => {\n    this.setState(state => ({\n      start: !state.start,\n    }));\n    this.setState(state => {\n      const { start } = state;\n      if (start) {\n        this.myInterval = setInterval(() => {\n          this.setState(({ count }) => ({\n            count: count + 1,\n          }));\n        }, 10);\n      } else {\n        clearInterval(this.myInterval);\n      }\n    });\n  };\n\n  resetTimer = () => {\n    this.setState({\n      start: false,\n      count: 0,\n    });\n    clearInterval(this.myInterval);\n  };\n\n  render() {\n    const { count } = this.state;\n\n    const dividOn = number => {\n      const minutes =\n        Math.floor(number / 6000) >= 10\n          ? Math.floor(number / 6000)\n          : `0${Math.floor(number / 6000)}`;\n      const seconds =\n        Math.floor((number % 6000) / 10) >= 100\n          ? Math.floor((number % 6000) / 100)\n          : `0${Math.floor((number % 6000) / 100)}`;\n\n      const mili = number % 100 >= 10 ? number % 100 : `0${number % 100}`;\n      return `${minutes}:${seconds}:${mili}`;\n    };\n\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.startTimer} className=\"btn\">\n          Start/Pause\n        </Button>\n        The timer is {dividOn(count)}\n        <Button type=\"primary\" onClick={this.resetTimer} className=\"btn\">\n          Reset\n        </Button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Progress } from 'antd';\nimport PropTypes from 'prop-types';\nimport './countdown.css';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class Countdownn extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     progress: 0,\n  //     start: false,\n  //     minutesP: 0,\n  //     secondsP: 0,\n  //   };\n  // }\n\n  render() {\n    const { minutes, seconds, count, startTime } = this.props;\n    const showTime = timeInSecs => {\n      const mins = Math.floor(Math.floor(timeInSecs / 1000) / 60);\n      const secs = Math.floor(timeInSecs / 1000) - mins * 60;\n      const milise = Math.floor((timeInSecs - secs * 1000 - mins * 60 * 1000) / 10);\n      const outPut = `${mins.toString().padStart(2, '0')}:${secs\n        .toString()\n        .padStart(2, '0')}:${milise.toString().padStart(2, '0')}`;\n      return outPut;\n    };\n\n    const newCount = count < 0 ? `00:00` : showTime(count);\n\n    const progressBar =\n      count === startTime\n        ? Math.floor(count / startTime) * 100\n        : Math.floor((count / startTime) * 100) % 100;\n\n    return (\n      <div>\n        <Progress percent={progressBar} status=\"active\" className=\"progressBar\" />\n        <div>\n          Timer: minutes: {minutes}, seconds: {seconds} or {newCount}\n        </div>\n      </div>\n    );\n  }\n}\nCountdownn.defaultProps = {\n  minutes: 0,\n  seconds: 0,\n  startTime: 0,\n  count: 0,\n};\nCountdownn.propTypes = {\n  minutes: PropTypes.number,\n  seconds: PropTypes.number,\n  startTime: PropTypes.number,\n  count: PropTypes.number,\n};\n","import React, { Component } from 'react';\nimport { Button, Slider, InputNumber } from 'antd';\nimport './countdown.css';\nimport Countdownn from './countdown';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class InputTime extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: 0,\n      seconds: 0,\n      sliderValue: 0,\n      start: false,\n      count: 0,\n      disabled: false,\n      startTime: 0,\n    };\n  }\n\n  componentDidUpdate() {\n    const { start, count } = this.state;\n    if (start && count < 1) {\n      clearInterval(this.myInterval);\n    }\n  }\n\n  sliderChange = value => {\n    const minutes = Math.trunc((value * 100) / 100);\n    let seconds;\n    switch ((value * 100) % 100) {\n      case 25:\n        seconds = 15;\n        break;\n      case 50:\n        seconds = 30;\n        break;\n      case 75:\n        seconds = 45;\n        break;\n      default:\n        seconds = 0;\n        break;\n    }\n    this.setState({\n      minutes,\n      seconds,\n      sliderValue: value,\n      count: (minutes * 60 + seconds) * 1000,\n      startTime: (minutes * 60 + seconds) * 1000,\n    });\n  };\n\n  minutesChange = value => {\n    this.setState({\n      minutes: value > 720 ? 720 : value,\n    });\n    this.setState(({ minutes, seconds }) => ({\n      seconds: minutes >= 720 ? 0 : seconds,\n    }));\n    this.setState(({ minutes, seconds }) => ({\n      count: (minutes * 60 + seconds) * 1000,\n      startTime: (minutes * 60 + seconds) * 1000,\n    }));\n  };\n\n  secondsChange = value => {\n    const { minutes } = this.state;\n    this.setState({\n      seconds: minutes >= 720 ? 0 : value,\n    });\n    this.setState(({ seconds }) => ({\n      count: (minutes * 60 + seconds) * 1000,\n      startTime: (minutes * 60 + seconds) * 1000,\n    }));\n  };\n\n  startOrPause = () => {\n    this.setState(state => ({\n      start: !state.start,\n      disabled: true,\n    }));\n    this.setState(state => {\n      const { start } = state;\n      if (start) {\n        this.myInterval = setInterval(() => {\n          this.setState(({ count }) => ({\n            count: count - 3,\n          }));\n        }, 1);\n      } else {\n        clearInterval(this.myInterval);\n      }\n    });\n  };\n\n  resetTimer = () => {\n    this.setState({\n      start: false,\n      count: 0,\n      minutes: 0,\n      seconds: 0,\n      sliderValue: 0,\n      disabled: false,\n    });\n    clearInterval(this.myInterval);\n  };\n\n  render() {\n    const { minutes, seconds, sliderValue, count, disabled, startTime } = this.state;\n    return (\n      <>\n        <Slider\n          step={0.25}\n          min={0}\n          max={60}\n          disabled={disabled}\n          className=\"slider\"\n          onChange={this.sliderChange}\n          value={sliderValue}\n        />\n        <InputNumber\n          max={720}\n          min={0}\n          value={minutes}\n          placeholder=\"Minutes\"\n          type=\"number\"\n          className=\"inputTime\"\n          onChange={this.minutesChange}\n          disabled={disabled}\n        />\n        <InputNumber\n          max={60}\n          min={0}\n          value={seconds}\n          placeholder=\"Seconds\"\n          rype=\"number\"\n          className=\"inputTime\"\n          onChange={this.secondsChange}\n          disabled={disabled}\n        />\n        <Countdownn\n          minutes={minutes}\n          seconds={seconds}\n          count={Math.floor(count)}\n          startTime={startTime}\n        />\n        <Button type=\"primary\" onClick={this.startOrPause} className=\"btn\">\n          Start/Pause\n        </Button>\n        <Button type=\"primary\" onClick={this.resetTimer} className=\"btn\">\n          Reset\n        </Button>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { Tabs } from 'antd';\nimport Timer from './components/Timer/index';\nimport InputTime from './components/Countdown/inputTime';\n\nconst { TabPane } = Tabs;\n\nconst callback = key => {\n  console.log(key);\n};\n\nconst App = () => (\n  <div className=\"App\">\n    <Tabs defaultActiveKey=\"1\" onChange={callback}>\n      <TabPane tab=\"Tab 1\" key=\"1\">\n        <Timer />\n      </TabPane>\n      <TabPane tab=\"Tab 2\" key=\"2\">\n        <InputTime />\n      </TabPane>\n    </Tabs>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}